from web3 import Web3
from dotenv import load_dotenv
import os

load_dotenv()

# RPC URL
RPC_URL = "https://eth.llamarpc.com"
w3 = Web3(Web3.HTTPProvider(RPC_URL))

# Contracts
POSITION_MANAGER = Web3.to_checksum_address('0xbd216513d74c8cf14cf4747e6aaa6420ff64ee9e')
STATE_VIEW = Web3.to_checksum_address('0x7ffe42c4a5deea5b0fec41c94c136cf115597227')
WETH_ADDRESS = Web3.to_checksum_address('0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2')
CHAINLINK_ETH_USD = Web3.to_checksum_address("0x5f4ec3df9cbd43714fe2740f5e3616155c5b8419")

# Position token
TOKEN_ID = 85000

# ABIs
position_manager_abi = [
    {"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],
     "name":"getPoolAndPositionInfo","outputs":[
        {"components":[
            {"internalType":"address","name":"currency0","type":"address"},
            {"internalType":"address","name":"currency1","type":"address"},
            {"internalType":"uint24","name":"fee","type":"uint24"},
            {"internalType":"int24","name":"tickSpacing","type":"int24"},
            {"internalType":"address","name":"hooks","type":"address"}],
         "internalType":"struct PoolKey","name":"poolKey","type":"tuple"},
        {"internalType":"uint256","name":"info","type":"uint256"}],
     "stateMutability":"view","type":"function"}]

erc721_abi = [
    {"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],
     "name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],
     "stateMutability":"view","type":"function"}]

state_view_abi = [
    {"inputs":[
        {"internalType":"bytes32","name":"","type":"bytes32"},
        {"internalType":"address","name":"","type":"address"},
        {"internalType":"int24","name":"","type":"int24"},
        {"internalType":"int24","name":"","type":"int24"},
        {"internalType":"bytes32","name":"","type":"bytes32"}],
     "name":"getPositionInfo",
     "outputs":[
        {"internalType":"uint128","name":"liquidity","type":"uint128"},
        {"internalType":"uint256","name":"feeGrowthInside0LastX128","type":"uint256"},
        {"internalType":"uint256","name":"feeGrowthInside1LastX128","type":"uint256"}],
     "stateMutability":"view","type":"function"},
    {"inputs":[
        {"internalType":"bytes32","name":"","type":"bytes32"},
        {"internalType":"int24","name":"","type":"int24"},
        {"internalType":"int24","name":"","type":"int24"}],
     "name":"getFeeGrowthInside",
     "outputs":[
        {"internalType":"uint256","name":"feeGrowthInside0X128","type":"uint256"},
        {"internalType":"uint256","name":"feeGrowthInside1X128","type":"uint256"}],
     "stateMutability":"view","type":"function"}]

erc20_abi = [{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],
              "stateMutability":"view","type":"function"}]

v3_factory_address = Web3.to_checksum_address("0x1F98431c8aD98523631AE4a59f267346ea31F984")
v3_factory_abi = [{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},
                             {"internalType":"address","name":"tokenB","type":"address"},
                             {"internalType":"uint24","name":"fee","type":"uint24"}],
                   "name":"getPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],
                   "stateMutability":"view","type":"function"}]

v2_factory_address = Web3.to_checksum_address("0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f")
v2_factory_abi = [{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},
                             {"internalType":"address","name":"tokenB","type":"address"}],
                   "name":"getPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],
                   "stateMutability":"view","type":"function"}]

chainlink_abi = [{"inputs":[],"name":"latestAnswer","outputs":[{"internalType":"int256","name":"","type":"int256"}],
                  "stateMutability":"view","type":"function"}]

# Contracts
position_manager = w3.eth.contract(address=POSITION_MANAGER, abi=position_manager_abi)
erc721 = w3.eth.contract(address=POSITION_MANAGER, abi=erc721_abi)
state_view = w3.eth.contract(address=STATE_VIEW, abi=state_view_abi)
v3_factory = w3.eth.contract(address=v3_factory_address, abi=v3_factory_abi)
v2_factory = w3.eth.contract(address=v2_factory_address, abi=v2_factory_abi)
chainlink_eth = w3.eth.contract(address=CHAINLINK_ETH_USD, abi=chainlink_abi)

def get_eth_price():
    """On-chain ETH/USD via Chainlink"""
    price = chainlink_eth.functions.latestAnswer().call()
    return price / 1e8  # Chainlink has 8 decimals

def get_token_price(token_address):
    zero = '0x0000000000000000000000000000000000000000'
    token_address = Web3.to_checksum_address(token_address)

    # ETH/WETH
    if token_address in [zero, WETH_ADDRESS]:
        return get_eth_price()

    # --- Try Uniswap V3 ---
    fee_tiers = [500, 3000, 10000]
    for fee in fee_tiers:
        try:
            pool = v3_factory.functions.getPool(token_address, WETH_ADDRESS, fee).call()
            if pool != zero:
                pool_abi = [{"inputs":[],"name":"slot0","outputs":[{"internalType":"uint160","name":"sqrtPriceX96","type":"uint160"}],"stateMutability":"view","type":"function"},
                            {"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},
                            {"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]
                pool_c = w3.eth.contract(address=pool, abi=pool_abi)
                sqrtPriceX96 = pool_c.functions.slot0().call()[0]
                t0 = pool_c.functions.token0().call()
                t1 = pool_c.functions.token1().call()
                if t0 == token_address:
                    price = (sqrtPriceX96**2 / 2**192)
                else:
                    price = (2**192 / sqrtPriceX96**2)
                return price * get_eth_price()
        except: 
            continue

    # --- Try Uniswap V2 ---
    try:
        pair = v2_factory.functions.getPair(token_address, WETH_ADDRESS).call()
        if pair != zero:
            pair_abi = [{"inputs":[],"name":"getReserves","outputs":[{"internalType":"uint112","name":"reserve0","type":"uint112"},
                                                                    {"internalType":"uint112","name":"reserve1","type":"uint112"},
                                                                    {"internalType":"uint32","name":"blockTimestampLast","type":"uint32"}],
                         "stateMutability":"view","type":"function"},
                        {"inputs":[],"name":"token0","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},
                        {"inputs":[],"name":"token1","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}]
            pair_c = w3.eth.contract(address=pair, abi=pair_abi)
            r0, r1, _ = pair_c.functions.getReserves().call()
            t0 = pair_c.functions.token0().call()
            t1 = pair_c.functions.token1().call()
            if t0 == token_address:
                price = r1 / r0
            else:
                price = r0 / r1
            return price * get_eth_price()
    except:
        pass

    return 0

# --- Example usage ---
try:
    owner = erc721.functions.ownerOf(TOKEN_ID).call()
    if owner == '0x0000000000000000000000000000000000000000':
        print("Position not minted or burned.")
        exit(0)

    pool_key, info = position_manager.functions.getPoolAndPositionInfo(TOKEN_ID).call()
    token0, token1 = pool_key[0], pool_key[1]

    price0 = get_token_price(token0)
    price1 = get_token_price(token1)

    print(f"Token0 {token0} price USD: {price0}")
    print(f"Token1 {token1} price USD: {price1}")

except Exception as e:
    print(f"Error: {e}")
